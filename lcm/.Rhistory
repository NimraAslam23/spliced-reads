alternative="two.sided",exact=FALSE)
#a) boxplot for M2
boxplot(M2data$mean_phenotypic_value~M2data$marker_genotype,
main="M2 Phenotypic Variation",xlab="Marker Genotype",
ylab="Mean Phenotypic Value (g)")
#b) median value for each genotype of M1
M2.BBmedian<-median(M2.BBgenotype$mean_phenotypic_value)
M2.BBmedian
rm(list=ls())
M1data<-data.frame(plant=c(1:10),
mean_phenotypic_value=c(139,120,103,115,121,135,113,140,112,103),
marker_genotype=c("BB","BB","BS","BB","BS","BB","BS","BB","BS","BS"))
M1data
M1.BB<-subset(M1data,M1data$marker_genotype=="BB")
M1.BS<-subset(M1data,M1data$marker_genotype=="BS")
M2data<-data.frame(plant=c(1:10),
mean_phenotypic_value=c(139,120,103,115,121,135,113,140,112,103),
marker_genotype=c("BB","BB","BB","BS","BS","BB","BS","BS","BB","BS"))
M2data
M2.BB<-subset(M2data,M2data$marker_genotype=="BB")
M2.BS<-subset(M2data,M2data$marker_genotype=="BS")
#a) boxplot for M1
boxplot(M1data$mean_phenotypic_value~M1data$marker_genotype,
main="M1 Phenotypic Variation",xlab="Marker Genotype",
ylab="Mean Phenotypic Value (g)")
#b) median value for each genotype of M1
M1.BBmedian<-median(M1.BBgenotype$mean_phenotypic_value)
rm(list=ls())
M1data<-data.frame(plant=c(1:10),
mean_phenotypic_value=c(139,120,103,115,121,135,113,140,112,103),
marker_genotype=c("BB","BB","BS","BB","BS","BB","BS","BB","BS","BS"))
M1data
M1.BB<-subset(M1data,M1data$marker_genotype=="BB")
rm(list=ls())
M1data<-data.frame(plant=c(1:10),
mean_phenotypic_value=c(139,120,103,115,121,135,113,140,112,103),
marker_genotype=c("BB","BB","BS","BB","BS","BB","BS","BB","BS","BS"))
M1data
M1.BB<-subset(M1data,M1data$marker_genotype=="BB")
M1.BS<-subset(M1data,M1data$marker_genotype=="BS")
M2data<-data.frame(plant=c(1:10),
mean_phenotypic_value=c(139,120,103,115,121,135,113,140,112,103),
marker_genotype=c("BB","BB","BB","BS","BS","BB","BS","BS","BB","BS"))
M2data
M2.BB<-subset(M2data,M2data$marker_genotype=="BB")
M2.BS<-subset(M2data,M2data$marker_genotype=="BS")
#a) boxplot for M1
boxplot(M1data$mean_phenotypic_value~M1data$marker_genotype,
main="M1 Phenotypic Variation",xlab="Marker Genotype",
ylab="Mean Phenotypic Value (g)")
#b) median value for each genotype of M1
M1.BBmedian<-median(M1.BB$mean_phenotypic_value)
M1.BBmedian #135g
M1.BSmedian<-median(M1.BS$mean_phenotypic_value)
M1.BSmedian #112g
wilcox.test(M1.BB$mean_phenotypic_value,
M1.BS$mean_phenotypic_value,
alternative="two.sided",exact=FALSE)
#a) boxplot for M2
boxplot(M2data$mean_phenotypic_value~M2data$marker_genotype,
main="M2 Phenotypic Variation",xlab="Marker Genotype",
ylab="Mean Phenotypic Value (g)")
#b) median value for each genotype of M1
M2.BBmedian<-median(M2.BB$mean_phenotypic_value)
M2.BBmedian
M2.BSmedian<-median(M2.BS$mean_phenotypic_value)
M2.BSmedian
M2.BSmedian #115g
#c) wilcoxon rank sum test
wilcox.test(M2.BB$mean_phenotypic_value,
M2.BS$mean_phenotypic_value,
alternative="two.sided",exact=FALSE)
heritability.data<-data.frame(mid_parent_height_cm=c(161,170,168,167,157,172,160,175,172,180,159),
mean_offspring_height_cm=c(158,176,159,155,165,175,163,166,176,180,157))
heritability.data<-data.frame(mid_parent_height_cm=c(161,170,168,167,157,172,160,175,172,180,159),
mean_offspring_height_cm=c(158,176,159,155,165,175,163,166,176,180,157))
heritability.data
plot(heritability.data$mean_offspring_height_cm~heritability.data$mid_parent_height_cm)
plot(mid_parent_height_cm,mean_offspring_height_cm,data=heritability.data)
plot(heritability.data$mean_offspring_height_cm~heritability.data$mid_parent_height_cm)
plot(heritability.data$mean_offspring_height_cm~heritability.data$mid_parent_height_cm,
main="Parent-Offspring Regression",xlab="Mid Parent Height (cm)",
ylab="Mean Offspring Height (cm)")
q2data<-data.frame(mid_parent_height_cm=c(161,170,168,167,157,172,160,175,172,180,159),
mean_offspring_height_cm=c(158,176,159,155,165,175,163,166,176,180,157))
plot(q2data$mean_offspring_height_cm~q2data$mid_parent_height_cm,
main="Parent-Offspring Regression",xlab="Mid Parent Height (cm)",
ylab="Mean Offspring Height (cm)")
linear.regression<-lm()
q2data<-data.frame(mid_parent_height_cm=c(161,170,168,167,157,172,160,175,172,180,159),
mean_offspring_height_cm=c(158,176,159,155,165,175,163,166,176,180,157))
plot(q2data$mean_offspring_height_cm~q2data$mid_parent_height_cm,
main="Parent-Offspring Regression",xlab="Mid Parent Height (cm)",
ylab="Mean Offspring Height (cm)")
linear<-lm(mean_offspring_height_cm~mid_parent_height_cm,data=q2data)
linear<-lm(q2data$mid_parent_height_cm,q2data$mean_offspring_height_cm)
linear<-lm(q2data$mid_parent_height_cm,q2data$mean_offspring_height_cm,data=q2data)
linear<-lm(mean_offspring_height_cm ~ mid_parent_height_cm , data=q2data)
summary(linear)
rm(list=ls())
M1data<-data.frame(plant=c(1:10),
mean_phenotypic_value=c(139,120,103,115,121,135,113,140,112,103),
marker_genotype=c("BB","BB","BS","BB","BS","BB","BS","BB","BS","BS"))
M1.BB<-subset(M1data,M1data$marker_genotype=="BB")
M1.BS<-subset(M1data,M1data$marker_genotype=="BS")
M2data<-data.frame(plant=c(1:10),
mean_phenotypic_value=c(139,120,103,115,121,135,113,140,112,103),
marker_genotype=c("BB","BB","BB","BS","BS","BB","BS","BS","BB","BS"))
M2.BB<-subset(M2data,M2data$marker_genotype=="BB")
M2.BS<-subset(M2data,M2data$marker_genotype=="BS")
#a) boxplot for M1
boxplot(M1data$mean_phenotypic_value~M1data$marker_genotype,
main="M1 Phenotypic Variation",xlab="Marker Genotype",ylab="Mean Phenotypic Value (g)")
install.packages("devtools")
library("devtools")
library("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library("devtools")
devtools::install_github("benjjneb/dada2",ref="v1.18")
load("BiocManager")
load(BiocManager)
load("dada2")
install.packages("devtools")
library("devtools")
devtools::install_github("benjjneb/dada2",ref="v1.18")
devtools::install_github("pmartinezarbizu/pairwiseAdonis/pairwiseAdonis")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("dada2")
load("dada2")
load("dada2")
install.packages("devtools")
install.packages("devtools")
library("devtools")
devtools::install_github("benjjneb/dada2",ref="v1.18")
devtools::install_github("pmartinezarbizu/pairwiseAdonis/pairwiseAdonis")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("dada2")
BiocManager::install("phyloseq")
BiocManager::install("DESeq2")
install.packages("dendextend")
install.packages("tidyr")
install.packages("viridis")
install.packages("reshape")
load("dada2")
load("phyloseq")
load("vegan")
load("DESeq2")
load("ggplot2")
load("dendextend")
load("tidyr")
load("viridis")
library(dada2)
library("dada2")
library(dada2)
library(phyloseq)
library(vegan)
library(DESeq2)
library(ggplot2)
library(dendextend)
library(tidyr)
library(viridis)
library(reshape)
library(pairwiseAdonis)
install.packages("devtools")
install.packages("devtools")
library("devtools")
devtools::install_github("benjjneb/dada2",ref="v1.18")
devtools::install_github("pmartinezarbizu/pairwiseAdonis/pairwiseAdonis")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("dada2")
BiocManager::install("phyloseq")
BiocManager::install("DESeq2")
install.packages("dendextend")
install.packages("tidyr")
install.packages("viridis")
install.packages("reshape")
library(dada2)
library(phyloseq)
library(vegan)
library(DESeq2)
library(ggplot2)
library(dendextend)
library(tidyr)
library(viridis)
library(reshape)
library(pairwiseAdonis)
install.packages("reshape")
install.packages("cashen")
library(cashen)
install.packages("cashen")
library(cashen)
install.packages("devtools")
library("devtools")
devtools::install_github("benjjneb/dada2",ref="v1.18")
force = TRUE
devtools::install_github("pmartinezarbizu/pairwiseAdonis/pairwiseAdonis")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
install.packages("BiocManager")
install.packages("BiocManager")
BiocManager::install("dada2")
BiocManager::install("phyloseq")
BiocManager::install("DESeq2")
n
install.packages("dendextend")
install.packages("tidyr")
install.packages("viridis")
install.packages("reshape")
library(dada2)
library(phyloseq)
library(vegan)
library(DESeq2)
library(ggplot2)
library(dendextend)
library(tidyr)
library(viridis)
library(reshape)
library(pairwiseAdonis)
install.packages("devtools")
install.packages("devtools")
library("devtools")
devtools::install_github("benjjneb/dada2",ref="v1.18")
devtools::install_github("pmartinezarbizu/pairwiseAdonis/pairwiseAdonis")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("dada2")
library(dada2)
library(phyloseq)
library(vegan)
library(DESeq2)
library(ggplot2)
library(dendextend)
library(tidyr)
library(viridis)
library(reshape)
library(pairwiseAdonis)
install.packages("devtools")
library("devtools")
devtools::install_github("benjjneb/dada2",ref="v1.18")
devtools::install_github("pmartinezarbizu/pairwiseAdonis/pairwiseAdonis")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("dada2")
BiocManager::install("phyloseq")
BiocManager::install("DESeq2")
install.packages("ggplot2")
install.packages("dendextend")
install.packages("tidyr")
install.packages("viridis")
install.packages("reshape")
library("dada2")
library("phyloseq")
library("vegan")
library("DESeq2")
library("ggplot2")
library("dendextend")
library("tidyr")
library("viridis")
library("reshape")
library("pairwiseAdonis")
library("dada2")
library("phyloseq")
library("vegan")
library("DESeq2")
library("ggplot2")
library("dendextend")
library("tidyr")
library("viridis")
library("reshape")
library("pairwiseAdonis")
library("dada2")
library("pairwiseAdonis")
#load the dada2 package
library(dada2)
packageversion("dada2")
#load the dada2 package
library(dada2)
packageVersion("dada2") #1.18.0
#save work:
save.image(file="~/Documents/Biosci/Y2/CompOmics/Microbiome_Practical_1")
#save work:
save.image(file="~/Documents/Biosci/Y2/CompOmics/Microbiome_Practical_1/DADA2_Practical1_output.Rdata")
library(dada2)
packageVersion("dada2")
# Define the "path" variable so that it points to the extracted directory on YOUR machine that contains your unzipped fastq files:
path <- "~/Documents/Biosci/Y2/CompOmics/Microbiome_Practical_1")
# Define the "path" variable so that it points to the extracted directory on YOUR machine that contains your unzipped fastq files:
path <- "~/Documents/Biosci/Y2/CompOmics/Microbiome_Practical_1"
list.files(path)
# Define the "path" variable so that it points to the extracted directory on YOUR machine that contains your unzipped fastq files:
path <- "~/Documents/Biosci/Y2/CompOmics/Microbiome_Practical_1/DADA2"
list.files(path)
# Forward and reverse fastq filenames have format: SAMPLENAME_R1_001.fastq and SAMPLENAME_R2_001.fastq
fnFs <- sort(list.files(path, pattern="_R1_001.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2_001.fastq", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
sample.names
# We start by visualizing the quality profiles of the forward reads:
plotQualityProfile(fnFs[1:2])
# Now we visualize the quality profile of the reverse reads:
plotQualityProfile(fnRs[1:2])
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
names(filtFs) <- sample.names
names(filtRs) <- sample.names
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, trimLeft=c(19, 19), truncLen=c(270,230),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
head(out)
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, trimLeft=c(19, 19), truncLen=c(270,230),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
head(out)
head(out)
# We'll use standard filtering parameters: maxN=0 (DADA2 requires no Ns), truncQ=2, rm.phix=TRUE and maxEE=2. The maxEE parameter
# sets the maximum number of "expected errors" allowed in a read, which is a better filter than simply averaging quality scores.
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, trimLeft=c(19, 19), truncLen=c(270,230),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
# We'll use standard filtering parameters: maxN=0 (DADA2 requires no Ns), truncQ=2, rm.phix=TRUE and maxEE=2. The maxEE parameter
# sets the maximum number of "expected errors" allowed in a read, which is a better filter than simply averaging quality scores.
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, trimLeft=c(19, 19), truncLen=c(270,230),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
# Load the dada2 package.
library(dada2); packageVersion("dada2")
# Define the "path" variable so that it points to the extracted directory on YOUR machine that contains your unzipped fastq files:
path <- "~/Documents/Biosci/Y2/CompOmics/Microbiome_Practical_1/DADA2"
list.files(path)
# Forward and reverse fastq filenames have format: SAMPLENAME_R1_001.fastq and SAMPLENAME_R2_001.fastq
fnFs <- sort(list.files(path, pattern="_R1_001.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2_001.fastq", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
sample.names
# We start by visualizing the quality profiles of the forward reads:
plotQualityProfile(fnFs[1:2])
# Now we visualize the quality profile of the reverse reads:
plotQualityProfile(fnRs[1:2])
# Assign the filenames for the filtered fastq.gz files and place filtered files in filtered/ subdirectory:
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
names(filtFs) <- sample.names
names(filtRs) <- sample.names
# We'll use standard filtering parameters: maxN=0 (DADA2 requires no Ns), truncQ=2, rm.phix=TRUE and maxEE=2. The maxEE parameter
# sets the maximum number of "expected errors" allowed in a read, which is a better filter than simply averaging quality scores.
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, trimLeft=c(19, 19), truncLen=c(270,230),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
# We'll use standard filtering parameters: maxN=0 (DADA2 requires no Ns), truncQ=2, rm.phix=TRUE and maxEE=2. The maxEE parameter
# sets the maximum number of "expected errors" allowed in a read, which is a better filter than simply averaging quality scores.
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, trimLeft=c(19, 19), truncLen=c(270,230),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=FALSE) # On Windows set multithread=FALSE
# We'll use standard filtering parameters: maxN=0 (DADA2 requires no Ns), truncQ=2, rm.phix=TRUE and maxEE=2. The maxEE parameter
# sets the maximum number of "expected errors" allowed in a read, which is a better filter than simply averaging quality scores.
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, trimLeft=c(19, 19), truncLen=c(270,230),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=FALSE) # On Windows set multithread=FALSE
# We'll use standard filtering parameters: maxN=0 (DADA2 requires no Ns), truncQ=2, rm.phix=TRUE and maxEE=2. The maxEE parameter
# sets the maximum number of "expected errors" allowed in a read, which is a better filter than simply averaging quality scores.
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, trimLeft=c(19, 19), truncLen=c(270,230),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
# Install the dada2 package. If it is not installed, see here: https://benjjneb.github.io/dada2/dada-installation.html
install.packages('devtools')
library(devtools)
devtools::install_github("benjjneb/dada2", ref="v1.8")
# Load the dada2 package.
library(dada2); packageVersion("dada2")
# Define the "path" variable so that it points to the extracted directory on YOUR machine that contains your unzipped fastq files:
path <- "~/Documents/Biosci/Y2/CompOmics/Microbiome_Practical_1/DADA2"
list.files(path)
# Forward and reverse fastq filenames have format: SAMPLENAME_R1_001.fastq and SAMPLENAME_R2_001.fastq
fnFs <- sort(list.files(path, pattern="_R1_001.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2_001.fastq", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
sample.names
# We start by visualizing the quality profiles of the forward reads:
plotQualityProfile(fnFs[1:2])
# Now we visualize the quality profile of the reverse reads:
plotQualityProfile(fnRs[1:2])
# Assign the filenames for the filtered fastq.gz files and place filtered files in filtered/ subdirectory:
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
names(filtFs) <- sample.names
names(filtRs) <- sample.names
# We'll use standard filtering parameters: maxN=0 (DADA2 requires no Ns), truncQ=2, rm.phix=TRUE and maxEE=2. The maxEE parameter
# sets the maximum number of "expected errors" allowed in a read, which is a better filter than simply averaging quality scores.
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, trimLeft=c(19, 19), truncLen=c(270,230),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
# Install the dada2 package. If it is not installed, see here: https://benjjneb.github.io/dada2/dada-installation.html
install.packages('devtools')
# Install the dada2 package. If it is not installed, see here: https://benjjneb.github.io/dada2/dada-installation.html
install.packages('devtools')
library(devtools)
install.packages("devtools")
devtools::install_github("benjjneb/dada2")
packageVersion("dada2")
sessioninfo()
sessionInfo()
View(M1.BB)
getwd()
getwd()
setwd("/Users/nimraaslam/Documents/GitHub/lcm")
group_column |>
group_by(junction_name,disease) |>
mutate(mead_d = mean(n_spliced_reads))
library(tidyverse)
library(ggplot2)
library(tidyr)
library(dplyr)
spliced_reads_orig <- read.csv("spliced_read_from_lcm.csv")
getwd()
setwd("/Users/nimraaslam/Documents/GitHub/spliced-reads/lcm")
getwd()
spliced_reads_orig <- read.csv("spliced_read_from_lcm.csv")
View(spliced_reads_orig)
spliced_reads <- spliced_reads_orig
spliced_reads |>
distinct(sample_name) #21 unique samples
spliced_reads |>
distinct(junction_name) #770 splice junctions
group_column <- spliced_reads |>
select(junction_name, sample_name, n_spliced_reads) |>
complete(junction_name, sample_name,fill=list(n_spliced_reads = 0)) |>
mutate(disease = ifelse(grepl("ALS", sample_name),
"ALS",
"control"))
View(group_column)
group_column |>  filter(grepl("STMN2",junction_name)) |>
ggplot(aes(x = n_spliced_reads,
fill = disease)) +
stat_density() +
scale_x_continuous(trans = scales::pseudo_log_trans())
STMN2 <- group_column |>  filter(grepl("STMN2",junction_name))
k <- wilcox.test(n_spliced_reads ~ disease, STMN2) |>
broom::tidy()
View(k)
group_column |>
group_by(junction_name,disease) |>
mutate(mead_d = mean(n_spliced_reads))
View(group_column)
View(group_column)
group_column_nested <- group_column |>
group_by(junction_name,disease) |>
nest()
View(group_column_nested)
group_column_2 <- group_column |>
group_by(junction_name,disease) |>
mutate(mead_d = mean(n_spliced_reads))
View(group_column_2)
group_column_nested <- group_column_2 |>
group_by(junction_name,disease) |>
nest()
View(group_column_nested)
View(group_column_nested[[3]][[1]])
group_column_2 <- group_column |>
group_by(junction_name,disease) |>
mutate(mean_d = mean(n_spliced_reads))
View(group_column_2)
group_column_nested <- group_column_2 |>
group_by(junction_name,disease) |>
nest()
View(group_column_nested)
View(group_column_nested[[3]][[1]])
mean_per_junction <- group_column_nested |>
mutate(mean_n_spliced_reads = map_dbl(data, ~{mean(.x$n_spliced_reads)}))
View(mean_per_junction)
wilcox_test_nested = group_column_nested |>
mutate(wc_res = map(data, ~{broom::tidy(wilcox.test(.x$n_spliced_reads ~ .x$disease))})) |>
unnest(wc_res) |>
arrange(p.value)
View(wilcox_test_nested)
wilcox_test_nested = group_column_nested |>
mutate(wc_res = map(data,~{broom::tidy(wilcox.test(.x$n_spliced_reads ~ .x$disease))})) |>
unnest(wc_res) |>
arrange(p.value)
View(wilcox_test_nested)
wilcox_test_nested = group_column_nested |>
mutate(wc_res = map(data,~{broom::tidy(wilcox.test(.x$n_spliced_reads ~ disease))})) |>
unnest(wc_res) |>
arrange(p.value)
wilcox_test_nested = group_column_nested |>
mutate(wc_res = map(data,~{broom::tidy(wilcox.test(.x$n_spliced_reads ~ .x$disease))})) |>
unnest(wc_res) |>
arrange(p.value)
wilcox_tested_nested = group_column_nested |>
mutate(wc_res = map(data,~{broom::tidy(wilcox.test(.x$n_spliced_reads ~ .x$disease))})) |>
unnest(wc_res) |>
arrange(p.value)
wilcox_tested_nested <- group_column_nested |>
mutate(wc_res = map(data,~{broom::tidy(wilcox.test(.x$n_spliced_reads ~ .x$disease))})) |>
unnest(wc_res) |>
arrange(p.value)
group_column_nested <- group_column_2 |>
group_by(junction_name,disease) |>
nest()
mean_per_junction <- group_column_nested |>
mutate(mean_n_spliced_reads = map_dbl(data, ~{mean(.x$n_spliced_reads)}))
wilcox_tested_nested = group_column_nested |>
mutate(wc_res = map(data,~{broom::tidy(wilcox.test(.x$n_spliced_reads ~ .x$disease))})) |>
unnest(wc_res) |>
arrange(p.value)
