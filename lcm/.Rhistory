filter(!is.na(mutation_count) & mutation_count != "NA") |>
mutate(stmn2_cryptic_detected = cryptic_count >= 2) |>
group_by(study_start) |>
mutate(n_detected_stmn2 = sum(stmn2_cryptic_detected,na.rm = TRUE)) |>
ungroup() |>
filter(!is.na(stmn2_cryptic_detected)) |>
filter(n_detected_stmn2 > 2) |>
mutate(stmn2_cryptic_detected = as.logical(stmn2_cryptic_detected)) |> #changes FALSE and TRUE to 0 and 1 respectively
distinct() |>
filter(!is.na(disease_specific_survival_status) & disease_specific_survival_status != "NA") |>
mutate(disease_specific_survival_status = str_extract(disease_specific_survival_status, "^[^:]+"),
disease_specific_survival_status = as.numeric(disease_specific_survival_status))
# 1 = dead with tumor
# 0 = alive or dead tumor free
survfit(Surv(months_of_disease_specific_survival, disease_specific_survival_status) ~ 1,
data = subset(survival_STMN2_cryptic, stmn2_cryptic_detected==TRUE)) |>
ggsurvfit() +
labs(
x = "Months",
y = "Overall Survival Probability",
title = "Kaplan-Meier Curve: STMN2 Cryptic Events"
) +
add_confidence_interval()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(repurrrsive)
library(jsonlite)
library(clipr)
library(naniar)
library(ggpubr)
library(rstatix)
library(ggplot2)
library(tidyr)
library(dplyr)
library(knitr)
library(snapcount)
library(ggsignif)
library(TCGAbiolinks)
library(ggsurvfit)
library(survival)
library(survminer)
survfit(Surv(months_of_disease_specific_survival, disease_specific_survival_status) ~ 1,
data = subset(survival_STMN2_cryptic, stmn2_cryptic_detected==TRUE)) |>
ggsurvfit() +
labs(
x = "Months",
y = "Overall Survival Probability",
title = "Kaplan-Meier Curve: STMN2 Cryptic Events"
) +
add_confidence_interval()
STMN2_KM_fit <- survfit(Surv(months_of_disease_specific_survival, disease_specific_survival_status) ~ stmn2_cryptic_detected, data = survival_STMN2_cryptic)
ggsurvplot(STMN2_KM_fit, data = survival_STMN2_cryptic,
main = "Kaplan-Meier Curve: All Cancer Types (STMN2)",
legend.title = "STMN2 Cryptic Detected",
legend.labs = c("FALSE", "TRUE"),
legend.position = "bottom",
pval = TRUE,
conf.int = TRUE,
risk.table = TRUE,
tables.height = 0.2,
tables.theme = theme_cleantable(),
xlab = "Time (months)",
font.x = c(10, "bold"),
ylab = "Survival Probability",
font.y = c(10, "bold"),
fontsize = 4
)
aneuploidy_STMN2 <- cBio_clinical |>
left_join(STMN2_clinical_jir,by = c("case_submitter_id")) |>
janitor::clean_names() |>
rename("cancer_abbrev" = "cancer_abbrev_x") |>
select(case_submitter_id, study_id, cancer_abbrev, aneuploidy_score, cryptic_count, anno_count) |>
separate(study_id,into = ('study_start'),remove = FALSE) |>
unique() |>
mutate(aneuploidy_score = as.numeric(aneuploidy_score)) |>
filter(!is.na(aneuploidy_score) & aneuploidy_score != "NA") |>
mutate(stmn2_cryptic_detected = cryptic_count >= 2) |>
group_by(study_start) |>
mutate(n_total_samples = n_distinct(case_submitter_id)) |>
mutate(n_detected_stmn2 = sum(stmn2_cryptic_detected,na.rm = TRUE)) |>
ungroup() |>
filter(!is.na(stmn2_cryptic_detected)) |>
filter(n_detected_stmn2 > 2) |>
group_by(study_start) |>
mutate(wilcox_result = if (length(unique(stmn2_cryptic_detected)) < 2) {NA}
else {
list(broom::tidy(wilcox.test(aneuploidy_score ~ stmn2_cryptic_detected, exact = FALSE)))
}) |>
ungroup() |>
unnest(wilcox_result)
aneuploidy_STMN2 |>
ggplot(aes(x = stmn2_cryptic_detected,
y = aneuploidy_score)) +
geom_boxplot(aes(fill = stmn2_cryptic_detected)) +
labs(x = "Cancer Type",
y = "Aneuploidy Score") +
facet_wrap(~study_start) +
stat_compare_means(comparisons = list(c("TRUE", "FALSE")), label = "p.format") +
scale_y_continuous(expand = expansion(mult = c(0.05, 0.25))) +
theme(legend.position = "bottom") +
guides(fill = guide_legend(title = "Cryptic STMN2 detected")) +
theme(
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10),
strip.text = element_text(size = 10, face = "bold"),
strip.background = element_rect(fill = "lightgray"),
legend.text = element_text(size = 10),
legend.title = element_text(size = 12)
)
cancer_abbrev <- unique(survival_STMN2_cryptic$cancer_abbrev)
STMN2_survival_plots <- list()
pdf("survival_STMN2.pdf", width = 10, height = 10)
for(abbrev in cancer_abbrev) {
message(glue::glue("Processing cancer type: {abbrev}"))
plot_data <- survival_STMN2_cryptic |>
filter(cancer_abbrev == abbrev)
cancer <- survival_STMN2_cryptic |>
filter(cancer_abbrev == abbrev) |>
pull(cancer_abbrev) |>
unique()
plot_name <- glue::glue("{cancer}")
if (length(unique(plot_data$stmn2_cryptic_detected)) == 2) {
KM_fit <- survfit(Surv(months_of_disease_specific_survival, disease_specific_survival_status) ~ stmn2_cryptic_detected, data = plot_data)
STMN2_survival_plots[[abbrev]] <- ggsurvplot(KM_fit, data = plot_data,
legend.title = "Cryptic Detected",
legend.labs = c("FALSE", "TRUE"),
legend.position = "bottom",
pval = TRUE,
conf.int = TRUE,
risk.table = TRUE,
tables.height = 0.2,
tables.theme = theme_cleantable(),
xlab = "Time (months)",
font.x = c(10, "bold"),
ylab = "Survival Probability",
font.y = c(10, "bold"),
fontsize = 4
) +
ggtitle(plot_name)
print(STMN2_survival_plots[[abbrev]])
} else {
message(glue::glue("Skipping cancer type: {abbrev} due to insufficient data."))
}
}
dev.off()
cancer_abbrev <- unique(survival_STMN2_cryptic$cancer_abbrev)
STMN2_survival_plots <- list()
pdf("survival_STMN2.pdf", width = 10, height = 10)
for(abbrev in cancer_abbrev) {
message(glue::glue("Processing cancer type: {abbrev}"))
plot_data <- survival_STMN2_cryptic |>
filter(cancer_abbrev == abbrev)
cancer <- survival_STMN2_cryptic |>
filter(cancer_abbrev == abbrev) |>
pull(cancer_abbrev) |>
unique()
plot_name <- glue::glue("{cancer}")
if (length(unique(plot_data$stmn2_cryptic_detected)) == 2) {
KM_fit <- survfit(Surv(months_of_disease_specific_survival, disease_specific_survival_status) ~ stmn2_cryptic_detected, data = plot_data)
STMN2_survival_plots[[abbrev]] <- ggsurvplot(KM_fit, data = plot_data,
legend.title = "Cryptic Detected",
legend.labs = c("FALSE", "TRUE"),
legend.position = "bottom",
pval = TRUE,
conf.int = TRUE,
risk.table = TRUE,
tables.height = 0.2,
tables.theme = theme_cleantable(),
xlab = "Time (months)",
font.x = c(10, "bold"),
ylab = "Survival Probability",
font.y = c(10, "bold"),
fontsize = 4
) +
ggtitle(plot_name)
print(STMN2_survival_plots[[abbrev]])
} else {
message(glue::glue("Skipping cancer type: {abbrev} due to insufficient data."))
}
}
pdf(file = "survival_STMN2.pdf", width = 10, height = 10)
for(abbrev in cancer_abbrev) {
message(glue::glue("Processing cancer type: {abbrev}"))
plot_data <- survival_STMN2_cryptic |>
filter(cancer_abbrev == abbrev)
cancer <- survival_STMN2_cryptic |>
filter(cancer_abbrev == abbrev) |>
pull(cancer_abbrev) |>
unique()
plot_name <- glue::glue("{cancer}")
if (length(unique(plot_data$stmn2_cryptic_detected)) == 2) {
KM_fit <- survfit(Surv(months_of_disease_specific_survival, disease_specific_survival_status) ~ stmn2_cryptic_detected, data = plot_data)
STMN2_survival_plots[[abbrev]] <- ggsurvplot(KM_fit, data = plot_data,
legend.title = "Cryptic Detected",
legend.labs = c("FALSE", "TRUE"),
legend.position = "bottom",
pval = TRUE,
conf.int = TRUE,
risk.table = TRUE,
tables.height = 0.2,
tables.theme = theme_cleantable(),
xlab = "Time (months)",
font.x = c(10, "bold"),
ylab = "Survival Probability",
font.y = c(10, "bold"),
fontsize = 4
) +
ggtitle(plot_name)
print(STMN2_survival_plots[[abbrev]])
} else {
message(glue::glue("Skipping cancer type: {abbrev} due to insufficient data."))
}
}
dev.off()
pdf(file = "survival_STMN2.pdf")
for(abbrev in cancer_abbrev) {
message(glue::glue("Processing cancer type: {abbrev}"))
plot_data <- survival_STMN2_cryptic |>
filter(cancer_abbrev == abbrev)
cancer <- survival_STMN2_cryptic |>
filter(cancer_abbrev == abbrev) |>
pull(cancer_abbrev) |>
unique()
plot_name <- glue::glue("{cancer}")
if (length(unique(plot_data$stmn2_cryptic_detected)) == 2) {
KM_fit <- survfit(Surv(months_of_disease_specific_survival, disease_specific_survival_status) ~ stmn2_cryptic_detected, data = plot_data)
STMN2_survival_plots[[abbrev]] <- ggsurvplot(KM_fit, data = plot_data,
legend.title = "Cryptic Detected",
legend.labs = c("FALSE", "TRUE"),
legend.position = "bottom",
pval = TRUE,
conf.int = TRUE,
risk.table = TRUE,
tables.height = 0.2,
tables.theme = theme_cleantable(),
xlab = "Time (months)",
font.x = c(10, "bold"),
ylab = "Survival Probability",
font.y = c(10, "bold"),
fontsize = 4
) +
ggtitle(plot_name)
print(STMN2_survival_plots[[abbrev]])
} else {
message(glue::glue("Skipping cancer type: {abbrev} due to insufficient data."))
}
}
dev.off()
pdf(file = "survival_STMN2.pdf", width = 10, height = 10)
for(abbrev in cancer_abbrev) {
message(glue::glue("Processing cancer type: {abbrev}"))
plot_data <- survival_STMN2_cryptic |>
filter(cancer_abbrev == abbrev)
cancer <- survival_STMN2_cryptic |>
filter(cancer_abbrev == abbrev) |>
pull(cancer_abbrev) |>
unique()
plot_name <- glue::glue("{cancer}")
if (length(unique(plot_data$stmn2_cryptic_detected)) == 2) {
KM_fit <- survfit(Surv(months_of_disease_specific_survival, disease_specific_survival_status) ~ stmn2_cryptic_detected, data = plot_data)
STMN2_survival_plots[[abbrev]] <- ggsurvplot(KM_fit, data = plot_data,
legend.title = "Cryptic Detected",
legend.labs = c("FALSE", "TRUE"),
legend.position = "bottom",
pval = TRUE,
conf.int = TRUE,
risk.table = TRUE,
tables.height = 0.2,
tables.theme = theme_cleantable(),
xlab = "Time (months)",
font.x = c(10, "bold"),
ylab = "Survival Probability",
font.y = c(10, "bold"),
fontsize = 4
) +
ggtitle(plot_name)
print(STMN2_survival_plots[[abbrev]])
} else {
message(glue::glue("Skipping cancer type: {abbrev} due to insufficient data."))
}
}
dev.off()
pdf(file = "survival_STMN2.pdf", width = 10, height = 10)
for(abbrev in cancer_abbrev) {
message(glue::glue("Processing cancer type: {abbrev}"))
plot_data <- survival_STMN2_cryptic |>
filter(cancer_abbrev == abbrev)
cancer <- survival_STMN2_cryptic |>
filter(cancer_abbrev == abbrev) |>
pull(cancer_abbrev) |>
unique()
plot_name <- glue::glue("{cancer}")
if (length(unique(plot_data$stmn2_cryptic_detected)) == 2) {
KM_fit <- survfit(Surv(months_of_disease_specific_survival, disease_specific_survival_status) ~ stmn2_cryptic_detected, data = plot_data)
STMN2_survival_plots[[abbrev]] <- ggsurvplot(KM_fit, data = plot_data,
legend.title = "Cryptic Detected",
legend.labs = c("FALSE", "TRUE"),
legend.position = "bottom",
pval = TRUE,
conf.int = TRUE,
risk.table = TRUE,
tables.height = 0.2,
tables.theme = theme_cleantable(),
xlab = "Time (months)",
font.x = c(10, "bold"),
ylab = "Survival Probability",
font.y = c(10, "bold"),
fontsize = 6
) +
ggtitle(plot_name)
print(STMN2_survival_plots[[abbrev]])
} else {
message(glue::glue("Skipping cancer type: {abbrev} due to insufficient data."))
}
}
dev.off()
pdf(file = "survival_STMN2.pdf", width = 10, height = 10)
for(abbrev in cancer_abbrev) {
message(glue::glue("Processing cancer type: {abbrev}"))
plot_data <- survival_STMN2_cryptic |>
filter(cancer_abbrev == abbrev)
cancer <- survival_STMN2_cryptic |>
filter(cancer_abbrev == abbrev) |>
pull(cancer_abbrev) |>
unique()
plot_name <- glue::glue("{cancer}")
if (length(unique(plot_data$stmn2_cryptic_detected)) == 2) {
KM_fit <- survfit(Surv(months_of_disease_specific_survival, disease_specific_survival_status) ~ stmn2_cryptic_detected, data = plot_data)
STMN2_survival_plots[[abbrev]] <- ggsurvplot(KM_fit, data = plot_data,
legend.title = "Cryptic Detected",
legend.labs = c("FALSE", "TRUE"),
legend.position = "bottom",
pval = TRUE,
conf.int = TRUE,
risk.table = TRUE,
tables.height = 0.2,
tables.theme = theme_cleantable(),
xlab = "Time (months)",
font.x = c(12, "bold"),
ylab = "Survival Probability",
font.y = c(12, "bold"),
fontsize = 6
) +
ggtitle(plot_name)
print(STMN2_survival_plots[[abbrev]])
} else {
message(glue::glue("Skipping cancer type: {abbrev} due to insufficient data."))
}
}
dev.off()
aneuploidy_STMN2 <- cBio_clinical |>
left_join(STMN2_clinical_jir,by = c("case_submitter_id")) |>
janitor::clean_names() |>
rename("cancer_abbrev" = "cancer_abbrev_x") |>
select(case_submitter_id, study_id, cancer_abbrev, aneuploidy_score, cryptic_count, anno_count) |>
separate(study_id,into = ('study_start'),remove = FALSE) |>
unique() |>
mutate(aneuploidy_score = as.numeric(aneuploidy_score)) |>
filter(!is.na(aneuploidy_score) & aneuploidy_score != "NA") |>
mutate(stmn2_cryptic_detected = cryptic_count >= 2) |>
group_by(study_start) |>
mutate(n_total_samples = n_distinct(case_submitter_id)) |>
mutate(n_detected_stmn2 = sum(stmn2_cryptic_detected,na.rm = TRUE)) |>
ungroup() |>
filter(!is.na(stmn2_cryptic_detected)) |>
filter(n_detected_stmn2 > 2) |>
group_by(study_start) |>
mutate(wilcox_result = if (length(unique(stmn2_cryptic_detected)) < 2) {NA}
else {
list(broom::tidy(wilcox.test(aneuploidy_score ~ stmn2_cryptic_detected, exact = FALSE)))
}) |>
ungroup() |>
unnest(wilcox_result)
aneuploidy_STMN2 |>
ggplot(aes(x = stmn2_cryptic_detected,
y = aneuploidy_score)) +
geom_boxplot(aes(fill = stmn2_cryptic_detected)) +
labs(x = "Cancer Type",
y = "Aneuploidy Score") +
facet_wrap(~study_start) +
stat_compare_means(comparisons = list(c("TRUE", "FALSE")), label = "p.format") +
scale_y_continuous(expand = expansion(mult = c(0.05, 0.25))) +
theme(legend.position = "bottom") +
guides(fill = guide_legend(title = "Cryptic STMN2 detected")) +
theme(
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10),
strip.text = element_text(size = 10, face = "bold"),
strip.background = element_rect(fill = "lightgray"),
legend.text = element_text(size = 10),
legend.title = element_text(size = 12)
)
aneuploidy_STMN2 |>
ggplot(aes(x = stmn2_cryptic_detected,
y = aneuploidy_score)) +
geom_boxplot(aes(fill = stmn2_cryptic_detected)) +
labs(x = "Cancer Type",
y = "Aneuploidy Score") +
facet_wrap(~study_start) +
stat_compare_means(comparisons = list(c("TRUE", "FALSE")), label = "p.format") +
scale_y_continuous(expand = expansion(mult = c(0.05, 0.25))) +
theme(legend.position = "bottom") +
guides(fill = guide_legend(title = "Cryptic STMN2 detected")) +
theme(
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10),
strip.text = element_text(size = 10, face = "bold"),
strip.background = element_rect(fill = "lightgray"),
legend.text = element_text(size = 10),
legend.title = element_text(size = 12)
)
aneuploidy_STMN2 <- cBio_clinical |>
left_join(STMN2_clinical_jir,by = c("case_submitter_id")) |>
janitor::clean_names() |>
rename("cancer_abbrev" = "cancer_abbrev_x") |>
select(case_submitter_id, study_id, cancer_abbrev, aneuploidy_score, cryptic_count, anno_count) |>
separate(study_id,into = ('study_start'),remove = FALSE) |>
unique() |>
mutate(aneuploidy_score = as.numeric(aneuploidy_score)) |>
filter(!is.na(aneuploidy_score) & aneuploidy_score != "NA") |>
mutate(stmn2_cryptic_detected = cryptic_count >= 2) |>
group_by(study_start) |>
mutate(n_total_samples = n_distinct(case_submitter_id)) |>
mutate(n_detected_stmn2 = sum(stmn2_cryptic_detected,na.rm = TRUE)) |>
ungroup() |>
filter(!is.na(stmn2_cryptic_detected)) |>
filter(n_detected_stmn2 > 2) |>
group_by(study_start) |>
mutate(wilcox_result = if (length(unique(stmn2_cryptic_detected)) < 2) {NA}
else {
list(broom::tidy(wilcox.test(aneuploidy_score ~ stmn2_cryptic_detected, exact = FALSE)))
}) |>
ungroup() |>
unnest(wilcox_result)
aneuploidy_STMN2 |>
ggplot(aes(x = stmn2_cryptic_detected,
y = aneuploidy_score)) +
geom_boxplot(aes(fill = stmn2_cryptic_detected)) +
labs(x = "Cancer Type",
y = "Aneuploidy Score") +
facet_wrap(~study_start) +
stat_compare_means(comparisons = list(c("TRUE", "FALSE")), label = "p.format") +
scale_y_continuous(expand = expansion(mult = c(0.05, 0.25))) +
theme(legend.position = "bottom") +
guides(fill = guide_legend(title = "Cryptic STMN2 detected")) +
theme(
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10),
strip.text = element_text(size = 10, face = "bold"),
strip.background = element_rect(fill = "lightgray"),
legend.text = element_text(size = 10),
legend.title = element_text(size = 12)
)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(repurrrsive)
library(jsonlite)
library(clipr)
library(naniar)
library(ggpubr)
library(rstatix)
library(ggplot2)
library(tidyr)
library(dplyr)
library(knitr)
library(snapcount)
library(ggsignif)
library(TCGAbiolinks)
library(ggsurvfit)
library(survival)
library(survminer)
#ARHGAP32_query <- combine_two_junctions("ARHGAP32", "chr11:128992047-128998318", "chr11:128988126-128998318", "-")
#write.table(ARHGAP32_query, file="ARHGAP32_query.txt", sep=",")
ARHGAP32_query <- read.table("ARHGAP32_query.txt", sep=",")
#write_clip(ARHGAP32_query$gdc_cases.submitter_id)
ARHGAP32_clinical_orig <- read.csv("ARHGAP32_clinical.tsv", sep = "\t", header = TRUE, na.strings = "", fill = TRUE)
ARHGAP32_clinical <- ARHGAP32_clinical_orig
ARHGAP32_clinical <- ARHGAP32_clinical|>
select(case_submitter_id, project_id, age_at_index, ethnicity, gender, race, ajcc_pathologic_stage) |>
separate(project_id, into = c("project", "cancer_type")) |>
select(-project)
head(ARHGAP32_clinical)
ARHGAP32_clinical_jir <- ARHGAP32_query |>
rename("case_submitter_id" = "gdc_cases.submitter_id") |>
left_join(ARHGAP32_clinical, by=c("case_submitter_id")) |>
janitor::clean_names()
ARHGAP32_clinical_jir <- ARHGAP32_clinical_jir |>
select(-c(gdc_cases_diagnoses_tumor_stage, age_at_index, gdc_cases_demographic_gender, ajcc_pathologic_stage, ethnicity, race, gender)) |>   rename("cancer_abbrev" = "cancer_type")
# filter for cryptic coverage
ARHGAP32_clinical_jir_cryptic <- ARHGAP32_clinical_jir |> filter(cryptic_count > 2)
head(ARHGAP32_clinical_jir_cryptic)
ARHGAP32_clinical_jir |>
distinct() |>
drop_na() |>
ggplot(aes(x = fct_rev(fct_infreq(cancer_abbrev)))) +
geom_bar(aes(fill = cancer_abbrev)) +
coord_flip() +
labs(
x = "Cancer Type",
y = "Number of Cases",
title = ""
) +
theme(legend.position = "none", plot.title = element_text(size=10))
# BRCA = breast cancer; HNSC = head and neck cancer
